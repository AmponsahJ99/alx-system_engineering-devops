Many individuals wonder what happens when we enter a URL into a web browser and press “Enter.” It’s beneficial to have some understanding of how data travels from the internet to our computers and the operations that take place in the background of our browsers.
 
In this article, I will address numerous questions regarding how your web browser functions and the transfer of data to our computers via the Internet. 
DOMAIN NAME SYSTEM (DNS) REQUEST
When a user enters a URL and presses Enter, the browser’s initial task is to figure out the IP address of the server hosting the webpage. This process is carried out through a DNS query, also referred to as a DNS request. In this process, the user’s computer, acting as a DNS client, requests a response from a DNS server, seeking the IP address corresponding to the domain name (a computer server that maintains a database of public IP addresses and their associated hostnames).
Before seeking the IP address, the browser first checks its own cache and, if necessary, the operating system’s cache. If the IP address is still unknown, the browser turns to a Resolver server, which is often provided by the user’s Internet service provider. All resolvers have the knowledge of where to locate the root servers, which in turn can direct them to the .COM Top-Level Domain (TLD) server. If the resolver can’t immediately find the IP address for “https://www.google.com," the root server guides it to the .COM TLD server. To avoid repeated queries to the root server, the resolver stores this information in its cache. The .COM TLD server, when contacted, provides the authoritative name servers for “google.com” if it doesn’t already know the IP address. Again, the resolver saves this new information. The ultimate authority responsible for handling such requests is the authoritative name server. Once the IP address is obtained and stored, the resolver returns this data to the operating system.

TRANSMISSION CONTROL PROTOCOL / INTERNET PROTOCOL (TCP/IP)
The browser initiates communication with the website’s server by sending a request, but effective communication requires a common language or message format. Therefore, TCP/IP is used as a connecting method to establish this shared communication protocol.
TCP/IP consists of a series of rules designed for computer systems connected to the internet, and these rules are structured in layers. The following is a list of these layers:
1.	The first layer, known as the Application layer, direct communication occurs between applications like web browsers. This layer encompasses protocols like HTTP (for web browsing) and SMTP (for email communication). Data received from the browser at the Application layer is then transmitted to the second layer via a designated port.
2.	TCP and another protocol called UDP both reside in the Transport Layer, which is the second layer of the networking model. To enable TCP to identify the source of the data, each application layer protocol uses a distinct port to communicate with this layer. After receiving the data, TCP breaks it down into smaller units known as segments, often referred to as packets, to facilitate efficient transmission over the network. TCP attaches a header to each segment, which contains instructions for reassembling the segments in the correct order and includes error-checking information to ensure the segments arrive without issues, allowing for proper reassembly at their destination. Once this process is completed, the segments are passed to the third layer.
3.	Moving on to the third layer, known as the Internet Layer, it takes the segments and adds both the source and destination IP addresses to each segment. This ensures that no matter the route the segments take, they are aware of their starting point and their intended endpoint. Subsequently, the segments are forwarded to the uppermost layer.
4.	The final layer, known as the Network Access Layer, is responsible for managing data transmission between two devices that are connected to the same network. It outlines the physical means by which data should be sent across the network.
At this stage, your computer essentially communicates, saying, “I require the content from https://www.google.com," using the “https” protocol, and the server located at the specified IP address responds by providing the web pages in the agreed-upon protocol.
FIREWALLS
Network security tools like firewalls monitor both incoming and outgoing network traffic, evaluating it against predefined criteria to determine whether to permit or block specific types of communication. This surveillance includes tracking the conversation and any pertinent data packets exchanged with https://www.google.com, which continues until the connection is terminated by a firewall configured on your device. This proactive approach greatly reduces the risk of malware attacks, making it especially valuable for ensuring secure internet communication.

HYPERTEXT TRANSFER PROTOCOL SECURE/SECURE SOCKETS LAYER (HTTPS/SSL)
As mentioned earlier, HTTPS manages secure communication between a web server and a web browser. Usually, the security aspect of HTTPS is ensured by SSL (Secure Sockets Layer). SSL is a communication technology that simplifies the establishment of trusted connections and the encryption of data and packets exchanged between networked devices.
Therefore, before any further data transfer occurs, an SSL handshake process takes place at the start of the connection between your computer and https://www.google.com.
LOAD-BALANCER
Google searches are a routine part of our daily online activities. However, when there’s only one server handling https://www.google.com, your browser may encounter delays in loading the site’s content, or it might not connect to the site at all. This is because numerous users are often trying to access the same page simultaneously. To address this issue, companies like Google employ multiple high-capacity servers, each with its unique IP address, to manage the traffic to https://www.google.com. Even with multiple servers available, there’s still a need to distribute traffic efficiently from various parts of the world, and this is where load balancers play a crucial role.
In this context, load balancers are software programs or hardware devices responsible for directing requests from clients to numerous servers within the same network. Load balancing involves the use of various scheduling algorithms within a single piece of software. On the hardware side, load balancers are sometimes referred to as specialized routers or switches, and they are positioned between the servers and the clients to optimize the distribution of network traffic.
WEB SERVER & APPLICATION SERVER
A web server is a computer system responsible for handling requests from users on the World Wide Web and sending back data using the Hypertext Transfer Protocol (HTTP) and various other protocols. Its primary role is to display website content by storing, processing, and delivering web pages to visitors.
In contrast, an application server, unlike a web server, is designed to handle dynamic content, execute business logic for enterprise applications, and support multiple protocols for client responses. For instance, when you enter “https://www.google.com" into your web browser, the server will process your request and transmit the requested webpage to your computer.
DATABASE
Databases store data in an organized format, which allows for efficient searching and regular maintenance. They can store, manage, and retrieve various types of information systematically.
A Database Management System (DBMS) plays a vital role in managing data. It stores user information, updates data related to location and time zone, handles session data, and more. This system ensures that data is well-organized, both in terms of aesthetics and functionality.
To interact with the database system, including retrieving, storing, modifying, or removing data, the application server communicates with the database server. In the context of accessing the Google homepage, for instance, the database will be queried to gather location information based on our IP address. Subsequently, the application server will generate an HTML page tailored to our needs and deliver it to us.
FINAL RESPONSE
After gathering all the required data, the web server creates a response and transmits it back to the client. This response typically comprises the requested web page, as well as any additional resources necessary for its display, like images, stylesheets, or JavaScript files. The response is sent back through the established TCP/IP connection, which was established earlier in the process.
CONCLUSION
These are just some fundamental insights into how the internet functions, but I hope this has provided some clarity for those who were curious about what occurs when they input “https://www.google.com" into their browser and hit enter. I sincerely appreciate your visit, and I look forward to welcoming you back soon.








